srsieve2 v1.8.7, a program to find factors of k*b^n+c numbers for fixed b and variable k and n
-h --help             prints this help
-p --pmin=P0          sieve start: P0 < p (default 3)
-P --pmax=P1          sieve end: p < P1 (default 2^62)
-w --worksize=w       initial primes per chunk of work (default 16000)
-W --workers=W        start W workers (default 0)
-A --applyandexit     apply factors and exit (used with -I)
-i --inputterms=i     input file of remaining candidates
-I --inputfactors=I   input file with factors (used with -A)
-o --outputterms=o    output file of remaining candidates
-O --outputfactors=O  output file with new factors
-4 --fpstarget=4      stop sieving ASAP when factors per second falls below this value
-5 --spftarget=5      stop sieving ASAP when seconds per factor goes above this value
-6 --minutesforspf=6  maximum number of minutes to use for computed seconds per factor
-n --nmin=n           Minimum n to search (append value with 'p' to limit to n that are prime)
-N --nmax=N           Maximum n to search
-s --sequence=s       Sequence in form k*b^n+c where k, b, and c are decimal values
-f --format=f         Format of output file (A=ABC, D=ABCD (default), B=BOINC, P=ABC with number_primes, M=mfakt)
-l --legendrebytes=l  Bytes to use for Legendre tables (only used if abs(c)=1 for all sequences)
-L --legendrefile=L   Input/output diretory for Legendre tables (no files if -L not specified or -l0 is used)
-Q --showqcost        Output estimated effort for each q
-q --useq=q           q to use for discrete log
-r --removen          For sequences with d > 1, remove n where k*b^n+/-c mod d != 0
-R --remove=r         Remove single sequence r or sequences specified in file r
-S --splitbybestq     Split sequences into a file based upon best q for each sequence
-a --algebraic        Exit after generating algebraic factors
-c --genericlogic     use generic logic even if abs(c) = 1 for all sequences
-F --giantstepfactor=F a multiplier used in the calculation giant steps
                      As F increases, so do the number of giant steps.  default 1.000000
-U --bmmulitplier=U   multiplied by 2 to compute BASE_MULTIPLE (default 15 for single 1 for multi
                      default BASE_MULTIPLE=30, BASE_MULTIPLE=2 for multi)
-V --prmmultiplier=V  multiplied by BASE_MULTIPLE to compute POWER_RESIDUE_LCM (default 24 for single 360 for multi
                      default POWER_RESIDUE_LCM=360, POWER_RESIDUE_LCM=360 for multi)
-X --lbmultipler=X    multiplied by POWER_RESIDUE_LCM to compute LIMIT_BASE  (default 1 for single 1 for multi
                      default LIMIT_BASE=24, LIMIT_BASE=360 for multi)
